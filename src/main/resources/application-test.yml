server:
  port: 10791
  connection-timeout: 10000 
  tomcat:
    max-connections: 248
    max-threads: 248
    min-spare-threads: 32

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://127.0.0.1:3306/hisrun?useSSL=false&serverTimezone=UTC&characterEncoding=utf8
    username: root
    password: root
    initial-size: 1
    min-idle: 1
    max-active: 20
    # 配置获取连接等待超时的时间，配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
    #max-wait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    #time-between-eviction-runs-millis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    min-evictable-idle-time-millis: 300000
    validationQuery: SELECT 1 FROM DUAL
    # 空闲时检测连接是否有效
    test-while-idle: true
    # 申请连接时检测连接是否有效，会降低性能
    test-on-borrow: false
    # 归还连接时检测连接是否有效，会降低性能
    test-on-return: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 50
    # 配置监控统计拦截的filters,去掉后监控界面sql无法统计,'wall'用于防火墙
    filters: stat,wall
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    spring.datasource.connectionProperties=druid.stat.mergeSql: true;druid.stat.slowSqlMillis=5000

  redis:
    pool:
      # 连接池最大连接数（使用负值表示没有限制）
      max-active: 50
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      # 连接池中的最大空闲连接
      max-idle: 50
      # 连接池中的最小空闲连接
      min-idle: 10
      timeout: 300000
      maxRedirections: 6
    cluster: 
      nodes: 
        - 127.0.0.1:7000
        - 127.0.0.1:7001
        - 127.0.0.1:7002
        - 127.0.0.1:7003
        - 127.0.0.1:7004
        - 127.0.0.1:7005
mybatis:
  mapper-locations: classpath:mapper/*.xml
book: 
  name: Spring Boot2 实战之旅        
  author: SpringBoot2
  rValue: ${random.value}
  rUuid: ${random.uuid}